import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = {
    "ABC": [
        (2.5, "1.0,0.0,0.0", 100, 100),
        (2.5, "0.8,0.1,0.1", 100, 100),
        (2.5, "0.6,0.2,0.2", 100, 100),
        (2.5, "0.4,0.3,0.3", 100, 100),
        (2.5, "0.2,0.4,0.4", 100, 100),
        (2.5, "0.0,0.5,0.5", 100, 100),
        # ==============================
        (0.5, "1.0,0.0,0.0", 0, 0),
        (0.5, "0.8,0.1,0.1", 0, 0),
        (0.5, "0.6,0.2,0.2", 0, 0),
        (0.5, "0.4,0.3,0.3", 0, 0),
        (0.5, "0.2,0.4,0.4", 0, 0),
        (0.5, "0.0,0.5,0.5", 0, 0),
        # ===============================
        (1.0, "1.0,0.0,0.0", 100, 100),
        (1.0, "0.8,0.1,0.1", 100, 100),
        (1.0, "0.6,0.2,0.2", 100, 100),
        (1.0, "0.4,0.3,0.3", 100, 100),
        (1.0, "0.2,0.4,0.4", 100, 100),
        (1.0, "0.0,0.5,0.5", 100, 100),
        # ===============================
        (1.5, "1.0,0.0,0.0", 100, 100),
        (1.5, "0.8,0.1,0.1", 100, 100),
        (1.5, "0.6,0.2,0.2", 100, 100),
        (1.5, "0.4,0.3,0.3", 100, 100),
        (1.5, "0.2,0.4,0.4", 100, 100),
        (1.5, "0.0,0.5,0.5", 100, 100),
        # ==============================
        (2.0, "1.0,0.0,0.0", 100, 100),
        (2.0, "0.8,0.1,0.1", 100, 100),
        (2.0, "0.6,0.2,0.2", 100, 100),
        (2.0, "0.4,0.3,0.3", 100, 100),
        (2.0, "0.2,0.4,0.4", 100, 100),
        (2.0, "0.0,0.5,0.5", 100, 100),
    ],
    "A+B+C": [
        (2.5, "1.0,0.0,0.0", 100, 100),
        (2.5, "0.8,0.1,0.1", 100, 100),
        (2.5, "0.6,0.2,0.2", 100, 100),
        (2.5, "0.4,0.3,0.3", 100, 100),
        (2.5, "0.2,0.4,0.4", 100, 100),
        (2.5, "0.0,0.5,0.5", 100, 100),
        # =============================
        (0.5, "1.0,0.0,0.0", 0, 0),
        (0.5, "0.8,0.1,0.1", 0, 0),
        (0.5, "0.6,0.2,0.2", 0, 0),
        (0.5, "0.4,0.3,0.3", 0, 0),
        (0.5, "0.2,0.4,0.4", 0, 0),
        (0.5, "0.0,0.5,0.5", 0, 0),
        # ==============================
        (1.0, "1.0,0.0,0.0", 100, 83.33),
        (1.0, "0.8,0.1,0.1", 100, 83.33),
        (1.0, "0.6,0.2,0.2", 100, 83.33),
        (1.0, "0.4,0.3,0.3", 100, 83.33),
        (1.0, "0.2,0.4,0.4", 100, 83.33),
        (1.0, "0.0,0.5,0.5", 100, 100),
        # ==============================
        (1.5, "1.0,0.0,0.0", 100, 100),
        (1.5, "0.8,0.1,0.1", 100, 100),
        (1.5, "0.6,0.2,0.2", 100, 100),
        (1.5, "0.4,0.3,0.3", 100, 100),
        (1.5, "0.2,0.4,0.4", 100, 100),
        (1.5, "0.0,0.5,0.5", 100, 100),
        # ==============================
        (2.0, "1.0,0.0,0.0", 100, 100),
        (2.0, "0.8,0.1,0.1", 100, 100),
        (2.0, "0.6,0.2,0.2", 100, 100),
        (2.0, "0.4,0.3,0.3", 100, 100),
        (2.0, "0.2,0.4,0.4", 100, 100),
        (2.0, "0.0,0.5,0.5", 100, 100),
    ]
}

datamatches = {
    "ABC": [
        (2.5, "1.0,0.0,0.0", 15), (2.5, "0.8,0.1,0.1", 15), (2.5, "0.6,0.2,0.2", 15),
        (2.5, "0.4,0.3,0.3", 15), (2.5, "0.2,0.4,0.4", 15), (2.5, "0.0,0.5,0.5", 15),

        (0.5, "1.0,0.0,0.0", 0), (0.5, "0.8,0.1,0.1", 0), (0.5, "0.6,0.2,0.2", 0),
        (0.5, "0.4,0.3,0.3", 0), (0.5, "0.2,0.4,0.4", 0), (0.5, "0.0,0.5,0.5", 0),

        (1.0, "1.0,0.0,0.0", 14), (1.0, "0.8,0.1,0.1", 14), (1.0, "0.6,0.2,0.2", 14),
        (1.0, "0.4,0.3,0.3", 14), (1.0, "0.2,0.4,0.4", 14), (1.0, "0.0,0.5,0.5", 15),

        (1.5, "1.0,0.0,0.0", 15), (1.5, "0.8,0.1,0.1", 15), (1.5, "0.6,0.2,0.2", 15),
        (1.5, "0.4,0.3,0.3", 15), (1.5, "0.2,0.4,0.4", 15), (1.5, "0.0,0.5,0.5", 15),

        (2.0, "1.0,0.0,0.0", 15), (2.0, "0.8,0.1,0.1", 15), (2.0, "0.6,0.2,0.2", 15),
        (2.0, "0.4,0.3,0.3", 15), (2.0, "0.2,0.4,0.4", 15), (2.0, "0.0,0.5,0.5", 15),
    ],
    "A+B+C": [
        (2.5, "1.0,0.0,0.0", 6), (2.5, "0.8,0.1,0.1", 6), (2.5, "0.6,0.2,0.2", 6),
        (2.5, "0.4,0.3,0.3", 6), (2.5, "0.2,0.4,0.4", 6), (2.5, "0.0,0.5,0.5", 6),

        (0.5, "1.0,0.0,0.0", 0), (0.5, "0.8,0.1,0.1", 0), (0.5, "0.6,0.2,0.2", 0),
        (0.5, "0.4,0.3,0.3", 0), (0.5, "0.2,0.4,0.4", 0), (0.5, "0.0,0.5,0.5", 0),

        (1.0, "1.0,0.0,0.0", 5), (1.0, "0.8,0.1,0.1", 5), (1.0, "0.6,0.2,0.2", 5),
        (1.0, "0.4,0.3,0.3", 5), (1.0, "0.2,0.4,0.4", 5), (1.0, "0.0,0.5,0.5", 6),

        (1.5, "1.0,0.0,0.0", 6), (1.5, "0.8,0.1,0.1", 6), (1.5, "0.6,0.2,0.2", 6),
        (1.5, "0.4,0.3,0.3", 6), (1.5, "0.2,0.4,0.4", 6), (1.5, "0.0,0.5,0.5", 6),

        (2.0, "1.0,0.0,0.0", 6), (2.0, "0.8,0.1,0.1", 6), (2.0, "0.6,0.2,0.2", 6),
        (2.0, "0.4,0.3,0.3", 6), (2.0, "0.2,0.4,0.4", 6), (2.0, "0.0,0.5,0.5", 6),
    ]
}

# === Flatten to DataFrame ===
rows = []
for method, entries in datamatches.items():
    for threshold, factors, matches in entries:
        plot_val = matches if matches > 0 else 0.4
        rows.append((method, threshold, factors, matches, plot_val))

df = pd.DataFrame(rows, columns=["Pattern", "Threshold", "Factors", "Matches", "PlotValue"])

# === Construct hue key and desired order ===
df["Hue"] = df.apply(lambda row: f"{row['Pattern']} (Threshold {row['Threshold']})", axis=1)

# Create alternating hue order: ABC first, then A+B+C per threshold
thresholds = sorted(df["Threshold"].unique())
methods = ["ABC", "A+B+C"]
hue_order = [f"{m} (Threshold {t})" for t in thresholds for m in methods]  # alternating pattern

# === Color mapping with light/dark pairing ===
base_colors = sns.color_palette("Set2", n_colors=len(thresholds))
palette = {}
for i, t in enumerate(thresholds):
    base = base_colors[i]
    palette[f"ABC (Threshold {t})"] = tuple(min(1, c + 0.3) for c in base)  # lighter
    palette[f"A+B+C (Threshold {t})"] = base  # darker

# === Plot ===
plt.figure(figsize=(14, 7))

barplot = sns.barplot(
    data=df,
    x="Factors", y="PlotValue",
    hue="Hue",
    hue_order=hue_order,
    palette=palette,
    errorbar=None,
    estimator=lambda x: x.iloc[0],
    dodge=True
)

# plt.title("Number of Matches per (a,b,c) Combination by Threshold and Pattern (STAM)")
plt.xlabel("(a,b,c) Combination", fontsize=20)
plt.ylabel("Number of Matches", fontsize=20)
plt.xticks(rotation=45, fontsize=16)
plt.yticks(fontsize=16)
plt.grid(True, axis='y')
plt.ylim(0, df["Matches"].max() + 0.8)

# === Annotations ===
for container in barplot.containers:
    for bar in container:
        val = bar.get_height()
        label = 0 if val <= 0.5 else int(round(val))
        barplot.annotate(
            str(label),
            xy=(bar.get_x() + bar.get_width() / 2, val + 0.3),
            ha='center', va='bottom', fontsize=12
        )

# Use new legend order
barplot.legend(title="Pattern + Threshold", title_fontsize=18, bbox_to_anchor=(1.01, 1), loc='upper left', fontsize=16)
plt.tight_layout()
plt.savefig("exp1b-stam-combined.png")
